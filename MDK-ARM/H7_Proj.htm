<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\H7_Proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\H7_Proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Feb 19 11:09:00 2021
<BR><P>
<H3>Maximum Stack Usage =       5368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__user_font_get_bitmap &rArr; __user_font_getdata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[150]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c6]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[48]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">BusFault_Handler</a><BR>
 <LI><a href="#[46]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">HardFault_Handler</a><BR>
 <LI><a href="#[47]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">MemManage_Handler</a><BR>
 <LI><a href="#[49]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">UsageFault_Handler</a><BR>
 <LI><a href="#[38a]">draw_value_str</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[387]">lv_draw_label</a><BR>
 <LI><a href="#[293]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[293]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[381]">draw_pattern</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[387]">lv_draw_label</a><BR>
 <LI><a href="#[4d3]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d3]">lv_refr_obj</a><BR>
 <LI><a href="#[4ce]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ce]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[2e6]">_lv_obj_get_style_ptr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e2]">update_style_cache</a><BR>
 <LI><a href="#[2e1]">_lv_obj_get_style_int</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e2]">update_style_cache</a><BR>
 <LI><a href="#[493]">lv_obj_get_style_opa_scale</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e4]">_lv_obj_get_style_opa</a><BR>
 <LI><a href="#[4a8]">lv_obj_get_style_image_recolor_opa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e4]">_lv_obj_get_style_opa</a><BR>
 <LI><a href="#[490]">lv_obj_get_style_bg_opa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e4]">_lv_obj_get_style_opa</a><BR>
 <LI><a href="#[43a]">lv_event_send_func</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39e]">lv_event_send</a><BR>
 <LI><a href="#[487]">lv_obj_get_screen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[487]">lv_obj_get_screen</a><BR>
 <LI><a href="#[4c5]">refresh_children_position</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c5]">refresh_children_position</a><BR>
 <LI><a href="#[3cd]">lv_indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3cd]">lv_indev_search_obj</a><BR>
 <LI><a href="#[4c2]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c2]">refresh_children_style</a><BR>
 <LI><a href="#[3d3]">update_style_cache_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d3]">update_style_cache_children</a><BR>
 <LI><a href="#[30e]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30e]">apply_theme</a><BR>
 <LI><a href="#[4c4]">report_style_mod_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c4]">report_style_mod_core</a><BR>
 <LI><a href="#[48b]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48b]">obj_del_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c6]">ADC3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[60]">ADC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c8]">BDMA_Channel0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c9]">BDMA_Channel1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ca]">BDMA_Channel2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[cb]">BDMA_Channel3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[cc]">BDMA_Channel4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[cd]">BDMA_Channel5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ce]">BDMA_Channel6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[cf]">BDMA_Channel7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[48]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a7]">CEC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d0]">COMP1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d6]">CRS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[98]">CRYP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[97]">DCMI_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b7]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b8]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b9]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ba]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[59]">DMA1_Stream0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5a]">DMA1_Stream1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5b]">DMA1_Stream2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5c]">DMA1_Stream3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5d]">DMA1_Stream4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5e]">DMA1_Stream5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5f]">DMA1_Stream6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7c]">DMA1_Stream7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a3]">DMA2D_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[85]">DMA2_Stream0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[86]">DMA2_Stream1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[87]">DMA2_Stream2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[88]">DMA2_Stream3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[89]">DMA2_Stream4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8d]">DMA2_Stream5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8e]">DMA2_Stream6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8f]">DMA2_Stream7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[af]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c7]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4b]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d7]">ECC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8a]">ETH_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8b]">ETH_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[54]">EXTI0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[76]">EXTI15_10_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[55]">EXTI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[56]">EXTI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[57]">EXTI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[58]">EXTI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[65]">EXTI9_5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[61]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[63]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[62]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[64]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8c]">FDCAN_CAL_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[52]">FLASH_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7d]">FMC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9a]">FPU_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[99]">HASH_RNG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b6]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b0]">HRTIM1_Master_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b1]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b2]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b3]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b4]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[b5]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c5]">HSEM1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[46]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6e]">I2C1_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6d]">I2C1_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[70]">I2C2_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6f]">I2C2_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[92]">I2C3_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[91]">I2C3_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a9]">I2C4_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a8]">I2C4_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c2]">JPEG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a6]">LPTIM1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d1]">LPTIM2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d2]">LPTIM3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d3]">LPTIM4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d4]">LPTIM5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d5]">LPUART1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a2]">LTDC_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a1]">LTDC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c1]">MDIOS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c0]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c3]">MDMA_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[47]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[45]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ac]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ab]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ae]">OTG_FS_IRQHandler</a> from stm32h7xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ad]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[94]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[93]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[96]">OTG_HS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[95]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4f]">PVD_AVD_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4c]">PendSV_Handler</a> from stm32h7xx_it.o(i.PendSV_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a5]">QUADSPI_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[53]">RCC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[77]">RTC_Alarm_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[51]">RTC_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[44]">Reset_Handler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a0]">SAI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a4]">SAI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[bb]">SAI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d8]">SAI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7e]">SDMMC1_IRQHandler</a> from stm32h7xx_it.o(i.SDMMC1_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[c4]">SDMMC2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[aa]">SPDIF_RX_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[71]">SPI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[72]">SPI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[80]">SPI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9d]">SPI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9e]">SPI5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9f]">SPI6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[28]">ST7735_DeInit</a> from st7735.o(i.ST7735_DeInit) referenced 2 times from st7735.o(.data)
 <LI><a href="#[2b]">ST7735_DisplayOff</a> from st7735.o(i.ST7735_DisplayOff) referenced 2 times from st7735.o(.data)
 <LI><a href="#[2a]">ST7735_DisplayOn</a> from st7735.o(i.ST7735_DisplayOn) referenced 2 times from st7735.o(.data)
 <LI><a href="#[31]">ST7735_DrawBitmap</a> from st7735.o(i.ST7735_DrawBitmap) referenced 2 times from st7735.o(.data)
 <LI><a href="#[33]">ST7735_DrawHLine</a> from st7735.o(i.ST7735_DrawHLine) referenced 2 times from st7735.o(.data)
 <LI><a href="#[34]">ST7735_DrawVLine</a> from st7735.o(i.ST7735_DrawVLine) referenced 2 times from st7735.o(.data)
 <LI><a href="#[32]">ST7735_FillRGBRect</a> from st7735.o(i.ST7735_FillRGBRect) referenced 2 times from st7735.o(.data)
 <LI><a href="#[35]">ST7735_FillRect</a> from st7735.o(i.ST7735_FillRect) referenced 2 times from st7735.o(.data)
 <LI><a href="#[2d]">ST7735_GetBrightness</a> from st7735.o(i.ST7735_GetBrightness) referenced 2 times from st7735.o(.data)
 <LI><a href="#[2f]">ST7735_GetOrientation</a> from st7735.o(i.ST7735_GetOrientation) referenced 2 times from st7735.o(.data)
 <LI><a href="#[36]">ST7735_GetPixel</a> from st7735.o(i.ST7735_GetPixel) referenced 2 times from st7735.o(.data)
 <LI><a href="#[38]">ST7735_GetXSize</a> from st7735.o(i.ST7735_GetXSize) referenced 2 times from st7735.o(.data)
 <LI><a href="#[39]">ST7735_GetYSize</a> from st7735.o(i.ST7735_GetYSize) referenced 2 times from st7735.o(.data)
 <LI><a href="#[27]">ST7735_Init</a> from st7735.o(i.ST7735_Init) referenced 2 times from st7735.o(.data)
 <LI><a href="#[29]">ST7735_ReadID</a> from st7735.o(i.ST7735_ReadID) referenced 2 times from st7735.o(.data)
 <LI><a href="#[df]">ST7735_ReadRegWrap</a> from st7735.o(i.ST7735_ReadRegWrap) referenced from st7735.o(i.ST7735_RegisterBusIO)
 <LI><a href="#[e2]">ST7735_RecvDataWrap</a> from st7735.o(i.ST7735_RecvDataWrap) referenced from st7735.o(i.ST7735_RegisterBusIO)
 <LI><a href="#[e1]">ST7735_SendDataWrap</a> from st7735.o(i.ST7735_SendDataWrap) referenced from st7735.o(i.ST7735_RegisterBusIO)
 <LI><a href="#[2c]">ST7735_SetBrightness</a> from st7735.o(i.ST7735_SetBrightness) referenced 2 times from st7735.o(.data)
 <LI><a href="#[30]">ST7735_SetCursor</a> from st7735.o(i.ST7735_SetCursor) referenced 2 times from st7735.o(.data)
 <LI><a href="#[2e]">ST7735_SetOrientation</a> from st7735.o(i.ST7735_SetOrientation) referenced 2 times from st7735.o(.data)
 <LI><a href="#[37]">ST7735_SetPixel</a> from st7735.o(i.ST7735_SetPixel) referenced 2 times from st7735.o(.data)
 <LI><a href="#[e0]">ST7735_WriteRegWrap</a> from st7735.o(i.ST7735_WriteRegWrap) referenced from st7735.o(i.ST7735_RegisterBusIO)
 <LI><a href="#[12]">STORAGE_GetCapacity_FS</a> from usbd_storage_if.o(i.STORAGE_GetCapacity_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[17]">STORAGE_GetMaxLun_FS</a> from usbd_storage_if.o(i.STORAGE_GetMaxLun_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[11]">STORAGE_Init_FS</a> from usbd_storage_if.o(i.STORAGE_Init_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[13]">STORAGE_IsReady_FS</a> from usbd_storage_if.o(i.STORAGE_IsReady_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[14]">STORAGE_IsWriteProtected_FS</a> from usbd_storage_if.o(i.STORAGE_IsWriteProtected_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[15]">STORAGE_Read_FS</a> from usbd_storage_if.o(i.STORAGE_Read_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[16]">STORAGE_Write_FS</a> from usbd_storage_if.o(i.STORAGE_Write_FS) referenced 2 times from usbd_storage_if.o(.data)
 <LI><a href="#[4a]">SVC_Handler</a> from stm32h7xx_it.o(i.SVC_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[bc]">SWPMI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4d]">SysTick_Handler</a> from stm32h7xx_it.o(i.SysTick_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[da]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h750xx.o(.text)
 <LI><a href="#[50]">TAMP_STAMP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[bd]">TIM15_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[be]">TIM16_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[bf]">TIM17_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[66]">TIM1_BRK_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[69]">TIM1_CC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[68]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[67]">TIM1_UP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6a]">TIM2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6b]">TIM3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6c]">TIM4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7f]">TIM5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[83]">TIM6_DAC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[84]">TIM7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[78]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7b]">TIM8_CC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[79]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[81]">UART4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[82]">UART5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9b]">UART7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9c]">UART8_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[73]">USART1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[74]">USART2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[75]">USART3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[90]">USART6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[f]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[a]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[b]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[c]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[d]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[e]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1b]">USBD_MSC_DataIn</a> from usbd_msc.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[1c]">USBD_MSC_DataOut</a> from usbd_msc.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[19]">USBD_MSC_DeInit</a> from usbd_msc.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[20]">USBD_MSC_GetDeviceQualifierDescriptor</a> from usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[1e]">USBD_MSC_GetFSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetFSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[1d]">USBD_MSC_GetHSCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetHSCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[1f]">USBD_MSC_GetOtherSpeedCfgDesc</a> from usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[18]">USBD_MSC_Init</a> from usbd_msc.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[1a]">USBD_MSC_Setup</a> from usbd_msc.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc.o(.data)
 <LI><a href="#[49]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[d9]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4e]">WWDG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[112]">__main</a> from __main.o(!!!main) referenced from startup_stm32h750xx.o(.text)
 <LI><a href="#[43]">__user_font_get_bitmap</a> from my_font1.o(i.__user_font_get_bitmap) referenced 2 times from my_font1.o(.data)
 <LI><a href="#[42]">__user_font_get_glyph_dsc</a> from my_font1.o(i.__user_font_get_glyph_dsc) referenced 2 times from my_font1.o(.data)
 <LI><a href="#[f3]">_lv_disp_refr_task</a> from lv_refr.o(i._lv_disp_refr_task) referenced from lv_hal_disp.o(i.lv_disp_drv_register)
 <LI><a href="#[fc]">_lv_indev_read_task</a> from lv_indev.o(i._lv_indev_read_task) referenced from lv_hal_indev.o(i.lv_indev_drv_register)
 <LI><a href="#[f7]">_lv_ll_get_head</a> from lv_ll.o(i._lv_ll_get_head) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[f6]">_lv_ll_get_next</a> from lv_ll.o(i._lv_ll_get_next) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[f8]">_lv_ll_get_prev</a> from lv_ll.o(i._lv_ll_get_prev) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[f9]">_lv_ll_get_tail</a> from lv_ll.o(i._lv_ll_get_tail) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[dd]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[dc]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[e3]">anim_task</a> from lv_anim.o(i.anim_task) referenced from lv_anim.o(i._lv_anim_core_init)
 <LI><a href="#[f0]">btn_cb</a> from lv_demo_benchmark.o(i.btn_cb) referenced from lv_demo_benchmark.o(i.lv_demo_benchmark)
 <LI><a href="#[e9]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[e9]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[e8]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[e8]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[109]">disp_flush</a> from lv_port_disp_template.o(i.disp_flush) referenced from lv_port_disp_template.o(i.lv_port_disp_init)
 <LI><a href="#[105]">fade_in_anim_ready</a> from lv_obj.o(i.fade_in_anim_ready) referenced from lv_obj.o(i.lv_obj_fade_in)
 <LI><a href="#[de]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[10b]">fs_close</a> from lv_port_fs_template.o(i.fs_close) referenced from lv_port_fs_template.o(i.lv_port_fs_init)
 <LI><a href="#[10a]">fs_open</a> from lv_port_fs_template.o(i.fs_open) referenced from lv_port_fs_template.o(i.lv_port_fs_init)
 <LI><a href="#[10c]">fs_read</a> from lv_port_fs_template.o(i.fs_read) referenced from lv_port_fs_template.o(i.lv_port_fs_init)
 <LI><a href="#[10e]">fs_seek</a> from lv_port_fs_template.o(i.fs_seek) referenced from lv_port_fs_template.o(i.lv_port_fs_init)
 <LI><a href="#[10d]">fs_write</a> from lv_port_fs_template.o(i.fs_write) referenced from lv_port_fs_template.o(i.lv_port_fs_init)
 <LI><a href="#[eb]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(i.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[ec]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(i.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[10f]">keypad_read</a> from lv_port_indev_template.o(i.keypad_read) referenced from lv_port_indev_template.o(i.lv_port_indev_init)
 <LI><a href="#[26]">lcd_gettick</a> from lcd.o(i.lcd_gettick) referenced 2 times from lcd.o(.data)
 <LI><a href="#[21]">lcd_init</a> from lcd.o(i.lcd_init) referenced 2 times from lcd.o(.data)
 <LI><a href="#[23]">lcd_readreg</a> from lcd.o(i.lcd_readreg) referenced 2 times from lcd.o(.data)
 <LI><a href="#[25]">lcd_recvdata</a> from lcd.o(i.lcd_recvdata) referenced 2 times from lcd.o(.data)
 <LI><a href="#[24]">lcd_senddata</a> from lcd.o(i.lcd_senddata) referenced 2 times from lcd.o(.data)
 <LI><a href="#[22]">lcd_writereg</a> from lcd.o(i.lcd_writereg) referenced 2 times from lcd.o(.data)
 <LI><a href="#[111]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_anim.o(.constdata)
 <LI><a href="#[ee]">lv_btn_design</a> from lv_btn.o(i.lv_btn_design) referenced from lv_btn.o(i.lv_btn_create)
 <LI><a href="#[ed]">lv_btn_signal</a> from lv_btn.o(i.lv_btn_signal) referenced from lv_btn.o(i.lv_btn_create)
 <LI><a href="#[ef]">lv_cont_signal</a> from lv_cont.o(i.lv_cont_signal) referenced from lv_cont.o(i.lv_cont_create)
 <LI><a href="#[f4]">lv_draw_mask_line</a> from lv_draw_mask.o(i.lv_draw_mask_line) referenced from lv_draw_mask.o(i.lv_draw_mask_line_points_init)
 <LI><a href="#[f5]">lv_draw_mask_radius</a> from lv_draw_mask.o(i.lv_draw_mask_radius) referenced from lv_draw_mask.o(i.lv_draw_mask_radius_init)
 <LI><a href="#[3b]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt) referenced 2 times from lv_font_montserrat_14.o(.data)
 <LI><a href="#[3a]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt) referenced 2 times from lv_font_montserrat_14.o(.data)
 <LI><a href="#[e7]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[e4]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[e5]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[e6]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[fb]">lv_img_design</a> from lv_img.o(i.lv_img_design) referenced from lv_img.o(i.lv_img_create)
 <LI><a href="#[fa]">lv_img_signal</a> from lv_img.o(i.lv_img_signal) referenced from lv_img.o(i.lv_img_create)
 <LI><a href="#[fd]">lv_label_design</a> from lv_label.o(i.lv_label_design) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[ff]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[ff]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[100]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[100]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[fe]">lv_label_signal</a> from lv_label.o(i.lv_label_signal) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[103]">lv_obj_design</a> from lv_obj.o(i.lv_obj_design) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[101]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[f2]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_demo_benchmark.o(i.lv_demo_printer_anim_in)
 <LI><a href="#[f2]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[102]">lv_obj_signal</a> from lv_obj.o(i.lv_obj_signal) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[3e]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(i.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[40]">lv_txt_utf8_get_char_id</a> from lv_txt.o(i.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[41]">lv_txt_utf8_get_length</a> from lv_txt.o(i.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[3d]">lv_txt_utf8_next</a> from lv_txt.o(i.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[3f]">lv_txt_utf8_prev</a> from lv_txt.o(i.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[3c]">lv_txt_utf8_size</a> from lv_txt.o(i.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[104]">opa_scale_anim</a> from lv_obj.o(i.opa_scale_anim) referenced from lv_obj.o(i.lv_obj_fade_in)
 <LI><a href="#[f1]">task1_cb</a> from lv_demo_benchmark.o(i.task1_cb) referenced from lv_demo_benchmark.o(i.lv_demo_benchmark)
 <LI><a href="#[110]">theme_apply</a> from lv_theme_material.o(i.theme_apply) referenced from lv_theme_material.o(i.lv_theme_material_init)
 <LI><a href="#[106]">trans_anim_cb</a> from lv_obj.o(i.trans_anim_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[108]">trans_anim_ready_cb</a> from lv_obj.o(i.trans_anim_ready_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[107]">trans_anim_start_cb</a> from lv_obj.o(i.trans_anim_start_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[ea]">unicode_list_compare</a> from lv_font_fmt_txt.o(i.unicode_list_compare) referenced from lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[112]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[113]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4e8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4e9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4ea]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4eb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4ec]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[116]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[138]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[118]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[4ed]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[125]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[11c]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4ee]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[4ef]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4f0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[4f1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4f2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[4f3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4f4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4f5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4f6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4f7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4f8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4f9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4fa]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[4fb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4fc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[4fd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[4fe]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4ff]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[500]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[501]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[502]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[503]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[504]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[505]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[506]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[507]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[508]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[114]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[509]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[122]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[124]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[50a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[126]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; lv_demo_benchmark &rArr; lv_label_create &rArr; lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[50b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[155]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[129]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[50c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[12b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[44]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[50d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c6]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h750xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12d]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[130]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[50e]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_seek
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[133]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[143]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[117]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[136]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4e6]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot_compare
</UL>

<P><STRONG><a name="[450]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>

<P><STRONG><a name="[14e]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[50f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[511]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
</UL>

<P><STRONG><a name="[139]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[512]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[513]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[514]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2be]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[515]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[516]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[517]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[11d]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[13e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[141]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[135]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[134]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[dc]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[144]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[119]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[132]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[518]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[519]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[51a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[51b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[145]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[11f]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[121]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[13d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[14d]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[154]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[15e]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[51c]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[15d]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[51d]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[51e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[520]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[149]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[147]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[152]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[14a]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[521]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14c]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[148]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[14b]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[12c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[151]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[522]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[15c]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[153]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[15f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[157]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[156]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[160]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[159]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[523]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI4_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[161]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_WriteEnable
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 510 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[3d6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad_read
</UL>

<P><STRONG><a name="[4e7]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1_cb
</UL>

<P><STRONG><a name="[21b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Write
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Erase_Block
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writereg
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_senddata
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_recvdata
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_readreg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_WriteEnable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read_ID
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_GetStatus
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[162]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Erase_Block
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gettick
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_WriteEnable
</UL>

<P><STRONG><a name="[255]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[163]"></a>HAL_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[208]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[207]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[209]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[167]"></a>HAL_MspInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[169]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[164]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[190]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[267]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[268]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32h7xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[171]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[175]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[177]"></a>HAL_PCD_EP_Flush</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>

<P><STRONG><a name="[266]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[17a]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[17c]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[17f]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[182]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[183]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1134 bytes, Stack size 48 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>HAL_PCD_Init</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[195]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[18a]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_PCD_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32h7xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[18f]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[22b]"></a>HAL_PWREx_EnableUSBVoltageDetector</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUSBVoltageDetector))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2234 bytes, Stack size 48 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[193]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[165]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1be]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1282 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_RTC_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_Init &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[1da]"></a>HAL_SDEx_Read_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Read_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_SDEx_Read_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Read_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_SDEx_Write_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Write_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_SDEx_Write_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SDEx_Write_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[24b]"></a>HAL_SD_DriveTransceiver_1_8V_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_DriveTransceiver_1_8V_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[24a]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 440 bytes, Stack size 20 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[368]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_SD_GetCardStatus</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_GetCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_SD_GetCardStatus &rArr; SD_SendSDStatus &rArr; SDMMC_CmdStatusRegister &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SD_IRQHandler &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf1CpltCallback
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf0CpltCallback
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf1CpltCallback
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf0CpltCallback
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>HAL_SD_Init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_GetCardStatus &rArr; SD_SendSDStatus &rArr; SDMMC_CmdStatusRegister &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_SD_InitCard</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_SD_InitCard &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_SD_MspInit</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, sdmmc.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 466 bytes, Stack size 72 bytes, stm32h7xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_SPI_Init</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI4_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_SPI_Receive</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_recvdata
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_readreg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read_ID
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_GetStatus
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 566 bytes, Stack size 48 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Write
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Erase_Block
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writereg
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_senddata
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_readreg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_WriteEnable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read_ID
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_GetStatus
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 800 bytes, Stack size 64 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[168]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[222]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[221]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[224]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[200]"></a>HAL_UART_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[46]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[204]"></a>LCD_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Init &rArr; ST7735_RegisterBusIO
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[212]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[213]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[214]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[270]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[215]"></a>MSC_BOT_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[218]"></a>MSC_BOT_Reset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSC_BOT_Reset &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[211]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
</UL>

<P><STRONG><a name="[21a]"></a>MX_GPIO_Init</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21c]"></a>MX_RTC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>MX_SDMMC1_SD_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdmmc.o(i.MX_SDMMC1_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MX_SDMMC1_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_GetCardStatus &rArr; SD_SendSDStatus &rArr; SDMMC_CmdStatusRegister &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>MX_SPI1_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>MX_SPI4_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi.o(i.MX_SPI4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_SPI4_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>MX_TIM1_Init</STRONG> (Thumb, 164 bytes, Stack size 96 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MX_USB_DEVICE_Init &rArr; W25Qx_Init &rArr; W25Qx_Get_Parameter &rArr; W25Qx_Read_ID &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_RegisterStorage
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1c2]"></a>RTC_EnterInitMode</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32h7xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1c3]"></a>RTC_ExitInitMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32h7xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[20f]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_UpdateBotData
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity16
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>

<P><STRONG><a name="[20e]"></a>SCSI_SenseCode</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity16
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[7e]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SDMMC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDMMC1_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[23c]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1cb]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1c9]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[23e]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[23f]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1e3]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[1e4]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[240]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[241]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[243]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[244]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1cd]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[245]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[247]"></a>SDMMC_CmdStatusRegister</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdStatusRegister &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[1d2]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[248]"></a>SDMMC_CmdVoltageSwitch</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdVoltageSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdVoltageSwitch &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1e6]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[1e7]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[1e2]"></a>SDMMC_ConfigData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[249]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1c6]"></a>SDMMC_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[1ca]"></a>SDMMC_Init</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1de]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1d1]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[23a]"></a>SDMMC_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdVoltageSwitch
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[1d6]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[28]"></a>ST7735_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st7735.o(i.ST7735_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>ST7735_DisplayOff</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, st7735.o(i.ST7735_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7735_DisplayOff &rArr; ST7735_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_write_reg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_IO_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>ST7735_DisplayOn</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, st7735.o(i.ST7735_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7735_DisplayOn &rArr; ST7735_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_write_reg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_IO_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>ST7735_DrawBitmap</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, st7735.o(i.ST7735_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ST7735_DrawBitmap &rArr; ST7735_SetDisplayWindow &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_write_reg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetDisplayWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>ST7735_DrawHLine</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, st7735.o(i.ST7735_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_DrawHLine &rArr; ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>ST7735_DrawVLine</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, st7735.o(i.ST7735_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_DrawVLine &rArr; ST7735_SetPixel &rArr; ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>ST7735_FillRGBRect</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, st7735.o(i.ST7735_FillRGBRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST7735_FillRGBRect &rArr; ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>ST7735_FillRect</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, st7735.o(i.ST7735_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_FillRect &rArr; ST7735_DrawHLine &rArr; ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>ST7735_GetBrightness</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_GetBrightness))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>ST7735_GetOrientation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, st7735.o(i.ST7735_GetOrientation))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>ST7735_GetPixel</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, st7735.o(i.ST7735_GetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ST7735_GetPixel &rArr; ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_recv_data
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_read_reg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>ST7735_GetXSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, st7735.o(i.ST7735_GetXSize))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>ST7735_GetYSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, st7735.o(i.ST7735_GetYSize))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>ST7735_Init</STRONG> (Thumb, 1202 bytes, Stack size 56 bytes, st7735.o(i.ST7735_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ST7735_Init &rArr; ST7735_SetOrientation &rArr; ST7735_SetDisplayWindow &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_write_reg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetOrientation
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_IO_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>ST7735_ReadID</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, st7735.o(i.ST7735_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7735_ReadID &rArr; st7735_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[205]"></a>ST7735_RegisterBusIO</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, st7735.o(i.ST7735_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7735_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2c]"></a>ST7735_SetBrightness</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_SetBrightness))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>ST7735_SetCursor</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, st7735.o(i.ST7735_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_write_reg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRGBRect
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetPixel
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_GetPixel
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawHLine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>ST7735_SetOrientation</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, st7735.o(i.ST7735_SetOrientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_SetOrientation &rArr; ST7735_SetDisplayWindow &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_write_reg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>ST7735_SetPixel</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, st7735.o(i.ST7735_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_SetPixel &rArr; ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawVLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[257]"></a>SystemClock_Config</STRONG> (Thumb, 226 bytes, Stack size 328 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>SystemInit</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, system_stm32h7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1f4]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[202]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[203]"></a>UART_CheckIdleState</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[201]"></a>UART_SetConfig</STRONG> (Thumb, 878 bytes, Stack size 56 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[258]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[273]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[25a]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[25b]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[25c]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[25d]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[25e]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[25f]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[f]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[260]"></a>USBD_GetString</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[264]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[227]"></a>USBD_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[219]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[265]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[16e]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[170]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[16c]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[172]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[216]"></a>USBD_LL_FlushEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_FlushEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_FlushEP &rArr; HAL_PCD_EP_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[20d]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[263]"></a>USBD_LL_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[275]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[199]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[19a]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[269]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[217]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[1a8]"></a>USBD_LL_Reset</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1a9]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[1aa]"></a>USBD_LL_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[1a7]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[26a]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[20b]"></a>USBD_LL_StallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[26f]"></a>USBD_LL_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[1b1]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[210]"></a>USBD_LL_Transmit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1b]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_MSC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_MSC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_MSC_GetFSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_MSC_GetHSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_MSC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_MSC_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbd_msc.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[229]"></a>USBD_MSC_RegisterStorage</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_msc.o(i.USBD_MSC_RegisterStorage))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1a]"></a>USBD_MSC_Setup</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, usbd_msc.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_FlushEP
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(.data)
</UL>
<P><STRONG><a name="[26b]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ParseSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[228]"></a>USBD_RegisterClass</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[274]"></a>USBD_SetClassConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[22a]"></a>USBD_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[26c]"></a>USBD_StdDevReq</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[26e]"></a>USBD_StdEPReq</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[26d]"></a>USBD_StdItfReq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[17b]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[191]"></a>USB_ActivateSetup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>USB_CoreInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[174]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[1af]"></a>USB_DevConnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1a3]"></a>USB_DevDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1a1]"></a>USB_DevInit</STRONG> (Thumb, 368 bytes, Stack size 36 bytes, stm32h7xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[19d]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[17e]"></a>USB_EP0StartXfer</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[181]"></a>USB_EP0_OutStart</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>USB_EPClearStall</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[180]"></a>USB_EPSetStall</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[17d]"></a>USB_EPStartXfer</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, stm32h7xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[1b0]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[179]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
</UL>

<P><STRONG><a name="[178]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Flush
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>USB_GetDevSpeed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>USB_ReadPacket</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>USB_SetCurrentMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1ac]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[194]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[22c]"></a>USB_WritePacket</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[49]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[277]"></a>W25QXX_Write</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Erase_Block
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[278]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[253]"></a>W25Qx_Erase_Block</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, w25qxx.o(i.W25Qx_Erase_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = W25Qx_Erase_Block &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_WriteEnable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write_FS
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[27b]"></a>W25Qx_Get_Parameter</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, w25qxx.o(i.W25Qx_Get_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = W25Qx_Get_Parameter &rArr; W25Qx_Read_ID &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read_ID
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Init
</UL>

<P><STRONG><a name="[226]"></a>W25Qx_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, w25qxx.o(i.W25Qx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25Qx_Init &rArr; W25Qx_Get_Parameter &rArr; W25Qx_Read_ID &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Get_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[252]"></a>W25Qx_Read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w25qxx.o(i.W25Qx_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Qx_Read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read_FS
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[27c]"></a>W25Qx_Read_ID</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w25qxx.o(i.W25Qx_Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Qx_Read_ID &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Get_Parameter
</UL>

<P><STRONG><a name="[254]"></a>W25Qx_Write</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, w25qxx.o(i.W25Qx_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_WriteEnable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write_FS
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[279]"></a>W25Qx_WriteEnable</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w25qxx.o(i.W25Qx_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Erase_Block
</UL>

<P><STRONG><a name="[27e]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[27d]"></a>__hardfp_powf</STRONG> (Thumb, 1590 bytes, Stack size 40 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Get_Parameter
</UL>

<P><STRONG><a name="[524]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[283]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[282]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[281]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[280]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[27f]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[137]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[28a]"></a>_lv_anim_core_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_anim.o(i._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_anim_core_init &rArr; lv_task_create &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[28f]"></a>_lv_area_align</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_area_align
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>

<P><STRONG><a name="[298]"></a>_lv_area_intersect</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_area.o(i._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[292]"></a>_lv_area_is_in</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[4d1]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(i._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[293]"></a>_lv_area_is_point_on</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, lv_area.o(i._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[4d2]"></a>_lv_area_join</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_area.o(i._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[295]"></a>_lv_blend_fill</STRONG> (Thumb, 248 bytes, Stack size 80 bytes, lv_draw_blend.o(i._lv_blend_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[29c]"></a>_lv_blend_map</STRONG> (Thumb, 258 bytes, Stack size 80 bytes, lv_draw_blend.o(i._lv_blend_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _lv_blend_map &rArr; map_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[3c1]"></a>_lv_disp_pop_from_inv_buf</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_hal_disp.o(i._lv_disp_pop_from_inv_buf))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[f3]"></a>_lv_disp_refr_task</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, lv_refr.o(i._lv_disp_refr_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = _lv_disp_refr_task &rArr; lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[2ac]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(i._lv_font_clean_up_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_font_clean_up_fmt_txt &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[2ae]"></a>_lv_fs_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_fs.o(i._lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2af]"></a>_lv_group_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2b0]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 598 bytes, Stack size 40 bytes, lv_img_buf.o(i._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_img_buf_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[2b6]"></a>_lv_img_buf_transform_anti_alias</STRONG> (Thumb, 654 bytes, Stack size 104 bytes, lv_img_buf.o(i._lv_img_buf_transform_anti_alias))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_alpha
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[2b9]"></a>_lv_img_buf_transform_init</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, lv_img_buf.o(i._lv_img_buf_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_img_buf_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2bc]"></a>_lv_img_cache_open</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lv_img_cache.o(i._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[2c1]"></a>_lv_img_decoder_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(i._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2c3]"></a>_lv_indev_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(i._lv_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_indev_init &rArr; lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2c5]"></a>_lv_indev_read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_hal_indev.o(i._lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_indev_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[fc]"></a>_lv_indev_read_task</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, lv_indev.o(i._lv_indev_read_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _lv_indev_read_task &rArr; indev_button_proc &rArr; indev_proc_press &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_reset_query_handler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(i.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[2cd]"></a>_lv_inv_area</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lv_refr.o(i._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[2d1]"></a>_lv_ll_chg_list</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_chg_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_ll_chg_list &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
</UL>

<P><STRONG><a name="[f7]"></a>_lv_ll_get_head</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[2d5]"></a>_lv_ll_get_len</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lv_ll.o(i._lv_ll_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _lv_ll_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[f6]"></a>_lv_ll_get_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[f8]"></a>_lv_ll_get_prev</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[f9]"></a>_lv_ll_get_tail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[28b]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_create
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[2d6]"></a>_lv_ll_ins_head</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_create
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[2d8]"></a>_lv_ll_ins_prev</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[2d9]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[3e5]"></a>_lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[2da]"></a>_lv_ll_move_before</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_move_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>

<P><STRONG><a name="[2d2]"></a>_lv_ll_remove</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
</UL>

<P><STRONG><a name="[2ab]"></a>_lv_mem_buf_free_all</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_mem.o(i._lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_mem_buf_free_all &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[2a5]"></a>_lv_mem_buf_get</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, lv_mem.o(i._lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[2a8]"></a>_lv_mem_buf_release</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_mem.o(i._lv_mem_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_mem_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[43c]"></a>_lv_mem_get_size</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[468]"></a>_lv_mem_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2a7]"></a>_lv_memcpy</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, lv_mem.o(i._lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>

<P><STRONG><a name="[371]"></a>_lv_memset</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lv_mem.o(i._lv_memset))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[2a9]"></a>_lv_memset_00</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lv_mem.o(i._lv_memset_00))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
</UL>

<P><STRONG><a name="[377]"></a>_lv_memset_ff</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lv_mem.o(i._lv_memset_ff))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
</UL>

<P><STRONG><a name="[2dc]"></a>_lv_obj_disable_style_caching</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_obj.o(i._lv_obj_disable_style_caching))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_obj_disable_style_caching &rArr; lv_obj_get_style_list &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[2de]"></a>_lv_obj_get_style_color</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, lv_obj.o(i._lv_obj_get_style_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _lv_obj_get_style_color &rArr; _lv_style_list_get_color &rArr; _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_recolor
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[2e1]"></a>_lv_obj_get_style_int</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, lv_obj.o(i._lv_obj_get_style_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[2e4]"></a>_lv_obj_get_style_opa</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lv_obj.o(i._lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[2e6]"></a>_lv_obj_get_style_ptr</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lv_obj.o(i._lv_obj_get_style_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>

<P><STRONG><a name="[2e9]"></a>_lv_obj_set_style_local_opa</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_obj.o(i._lv_obj_set_style_local_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _lv_obj_set_style_local_opa &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_opa
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opa_scale_anim
</UL>

<P><STRONG><a name="[296]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[46a]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[439]"></a>_lv_sqrt</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lv_math.o(i._lv_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[2ed]"></a>_lv_style_get_color</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>

<P><STRONG><a name="[2f1]"></a>_lv_style_get_int</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_style_get_int &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
</UL>

<P><STRONG><a name="[2f2]"></a>_lv_style_get_mem_size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_get_mem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_style_get_mem_size &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_size
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[2f5]"></a>_lv_style_get_opa</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_style_get_opa &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
</UL>

<P><STRONG><a name="[2f6]"></a>_lv_style_get_ptr</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_style_get_ptr &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
</UL>

<P><STRONG><a name="[2f7]"></a>_lv_style_list_add_style</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[2f9]"></a>_lv_style_list_add_trans_style</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_add_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lv_style_list_add_trans_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[2e0]"></a>_lv_style_list_get_color</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_list_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_style_list_get_color &rArr; _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>

<P><STRONG><a name="[2e3]"></a>_lv_style_list_get_int</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_list_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_style_list_get_int &rArr; _lv_style_get_int &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[2e5]"></a>_lv_style_list_get_opa</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_list_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_style_list_get_opa &rArr; _lv_style_get_opa &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>

<P><STRONG><a name="[2e7]"></a>_lv_style_list_get_ptr</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_list_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_style_list_get_ptr &rArr; _lv_style_get_ptr &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>

<P><STRONG><a name="[2fa]"></a>_lv_style_list_get_transition_style</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_style.o(i._lv_style_list_get_transition_style))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[2f8]"></a>_lv_style_list_remove_style</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_style_list_remove_style &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>

<P><STRONG><a name="[2fd]"></a>_lv_style_list_reset</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_style_list_reset &rArr; lv_style_reset &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_local_style
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>

<P><STRONG><a name="[2ea]"></a>_lv_style_list_set_local_opa</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_set_local_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_style_list_set_local_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_opa
</UL>

<P><STRONG><a name="[302]"></a>_lv_style_set_color</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[304]"></a>_lv_style_set_int</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_delay
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[301]"></a>_lv_style_set_opa</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_set_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_opa
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pattern_opa
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
</UL>

<P><STRONG><a name="[305]"></a>_lv_style_set_ptr</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_set_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_font
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[306]"></a>_lv_task_core_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i._lv_task_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_task_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2b1]"></a>_lv_trigo_sin</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lv_math.o(i._lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>

<P><STRONG><a name="[307]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, lv_txt.o(i._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[309]"></a>_lv_txt_get_size</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, lv_txt.o(i._lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[30a]"></a>_lv_txt_get_width</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lv_txt.o(i._lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_txt_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[30b]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lv_txt.o(i._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[3a9]"></a>_lv_utils_bsearch</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lv_utils.o(i._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[366]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = disk_initialize &rArr; W25Qx_Init &rArr; W25Qx_Get_Parameter &rArr; W25Qx_Read_ID &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[367]"></a>disk_ioctl</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[369]"></a>disk_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = disk_read &rArr; W25Qx_Read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[4e2]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[35d]"></a>disk_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[289]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
</UL>

<P><STRONG><a name="[286]"></a>f_lseek</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_seek
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
</UL>

<P><STRONG><a name="[38d]"></a>f_mount</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_mount &rArr; mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
</UL>

<P><STRONG><a name="[285]"></a>f_open</STRONG> (Thumb, 458 bytes, Stack size 608 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
</UL>

<P><STRONG><a name="[287]"></a>f_read</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
</UL>

<P><STRONG><a name="[38b]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[398]"></a>f_write</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
</UL>

<P><STRONG><a name="[34f]"></a>ff_oem2uni</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[352]"></a>ff_uni2oem</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[346]"></a>ff_wtoupper</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[de]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[391]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[3e1]"></a>lv_anim_del</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_anim.o(i.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[3e2]"></a>lv_anim_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[3e3]"></a>lv_anim_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_anim.o(i.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_anim_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>

<P><STRONG><a name="[111]"></a>lv_anim_path_linear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_path_linear))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.constdata)
</UL>
<P><STRONG><a name="[47a]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[3e4]"></a>lv_anim_start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_anim_start &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>

<P><STRONG><a name="[37e]"></a>lv_area_get_size</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[4cf]"></a>lv_area_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[45d]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[3e8]"></a>lv_btn_create</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lv_btn.o(i.lv_btn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lv_btn_create &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[3f5]"></a>lv_btn_get_checkable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_btn.o(i.lv_btn_get_checkable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_btn_get_checkable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
</UL>

<P><STRONG><a name="[3f6]"></a>lv_btn_set_state</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lv_btn.o(i.lv_btn_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_btn_set_state &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
</UL>

<P><STRONG><a name="[32e]"></a>lv_color_darken</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_color.o(i.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[39b]"></a>lv_color_fill</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_color.o(i.lv_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[3d8]"></a>lv_color_lighten</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_color.o(i.lv_color_lighten))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_color_lighten &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[3e9]"></a>lv_cont_create</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lv_cont_create &rArr; lv_obj_del &rArr; obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>

<P><STRONG><a name="[3fe]"></a>lv_cont_get_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_cont.o(i.lv_cont_get_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cont_get_layout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[3f2]"></a>lv_cont_set_layout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_cont.o(i.lv_cont_set_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_cont_set_layout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>

<P><STRONG><a name="[417]"></a>lv_demo_benchmark</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lv_demo_benchmark.o(i.lv_demo_benchmark))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = lv_demo_benchmark &rArr; lv_label_create &rArr; lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_group
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_create
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_set_act
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[425]"></a>lv_disp_buf_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_disp_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[426]"></a>lv_disp_drv_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_hal_disp.o(i.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_disp_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[427]"></a>lv_disp_drv_register</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[36a]"></a>lv_disp_flush_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[297]"></a>lv_disp_get_buf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_buf))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[2ce]"></a>lv_disp_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>

<P><STRONG><a name="[312]"></a>lv_disp_get_dpi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[2a6]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
</UL>

<P><STRONG><a name="[3c0]"></a>lv_disp_get_inv_buf_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_inv_buf_size))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[3cc]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[3ce]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[429]"></a>lv_disp_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>

<P><STRONG><a name="[3cf]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
</UL>

<P><STRONG><a name="[42a]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[32b]"></a>lv_disp_get_size_category</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_get_size_category))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_get_size_category
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[2cf]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>

<P><STRONG><a name="[42b]"></a>lv_disp_is_double_buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_is_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[2a3]"></a>lv_disp_is_true_double_buf</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_is_true_double_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_is_true_double_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[382]"></a>lv_draw_img</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[384]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_img_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[387]"></a>lv_draw_label</STRONG> (Thumb, 1312 bytes, Stack size 256 bytes, lv_draw_label.o(i.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_num
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[385]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_draw_label.o(i.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_label_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[433]"></a>lv_draw_line</STRONG> (Thumb, 404 bytes, Stack size 136 bytes, lv_draw_line.o(i.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[42e]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_draw_line.o(i.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_line_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[36f]"></a>lv_draw_mask_add</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_add
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[372]"></a>lv_draw_mask_apply</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[36d]"></a>lv_draw_mask_get_cnt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_get_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[37d]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_mask_line_points_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
</UL>

<P><STRONG><a name="[36e]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_draw_mask.o(i.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_draw_mask_radius_init
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[45c]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[374]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_remove_id
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[431]"></a>lv_draw_rect</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[42f]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_rect_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[39e]"></a>lv_event_send</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj.o(i.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
</UL>

<P><STRONG><a name="[43a]"></a>lv_event_send_func</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lv_obj.o(i.lv_event_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>

<P><STRONG><a name="[3b]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; decompress &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.data)
</UL>
<P><STRONG><a name="[435]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_font.o(i.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[434]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_font.o(i.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[3a]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.data)
</UL>
<P><STRONG><a name="[30c]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_font.o(i.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[43d]"></a>lv_fs_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_fs_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[43e]"></a>lv_fs_drv_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_drv_init))
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
</UL>

<P><STRONG><a name="[43f]"></a>lv_fs_drv_register</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_fs_drv_register &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
</UL>

<P><STRONG><a name="[440]"></a>lv_fs_get_drv</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[441]"></a>lv_fs_get_ext</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_ext &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[442]"></a>lv_fs_open</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_fs_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_real_path
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[44b]"></a>lv_fs_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[44d]"></a>lv_fs_seek</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[421]"></a>lv_group_add_obj</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[41f]"></a>lv_group_create</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_group_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[3c9]"></a>lv_group_focus_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[3b7]"></a>lv_group_focus_obj</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_group_focus_obj &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
</UL>

<P><STRONG><a name="[3c8]"></a>lv_group_focus_prev</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[3c6]"></a>lv_group_get_editing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[3c4]"></a>lv_group_get_focused</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
</UL>

<P><STRONG><a name="[446]"></a>lv_group_remove_obj</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3c5]"></a>lv_group_send_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[3c7]"></a>lv_group_set_editing</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
</UL>

<P><STRONG><a name="[2b5]"></a>lv_img_buf_get_px_alpha</STRONG> (Thumb, 208 bytes, Stack size 36 bytes, lv_img_buf.o(i.lv_img_buf_get_px_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[2b4]"></a>lv_img_buf_get_px_color</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, lv_img_buf.o(i.lv_img_buf_get_px_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_img_buf_get_px_color &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[448]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_img_cache.o(i.lv_img_cache_invalidate_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
</UL>

<P><STRONG><a name="[449]"></a>lv_img_cache_set_size</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_img_cache.o(i.lv_img_cache_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_img_cache_set_size &rArr; lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[447]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[2bb]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[2ba]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[41b]"></a>lv_img_create</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, lv_img.o(i.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = lv_img_create &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_adv_hittest
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[e7]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[e4]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[e5]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[e6]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_img_decoder_built_in_line_alpha &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[2bf]"></a>lv_img_decoder_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[2c2]"></a>lv_img_decoder_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[383]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[2c0]"></a>lv_img_decoder_open</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[45e]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lv_img_decoder.o(i.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[45f]"></a>lv_img_get_auto_size</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(i.lv_img_get_auto_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_img_get_auto_size
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[333]"></a>lv_img_get_src</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_img.o(i.lv_img_get_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_img_get_src
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_cb
</UL>

<P><STRONG><a name="[334]"></a>lv_img_set_src</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, lv_img.o(i.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_cb
</UL>

<P><STRONG><a name="[2bd]"></a>lv_img_src_get_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[462]"></a>lv_indev_drv_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_hal_indev.o(i.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_indev_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[463]"></a>lv_indev_drv_register</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_hal_indev.o(i.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_indev_drv_register &rArr; lv_task_create &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[43b]"></a>lv_indev_get_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>

<P><STRONG><a name="[464]"></a>lv_indev_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_indev.o(i.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[4e3]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3fa]"></a>lv_indev_is_dragging</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_is_dragging))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
</UL>

<P><STRONG><a name="[2c4]"></a>lv_indev_reset</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lv_indev.o(i.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3cd]"></a>lv_indev_search_obj</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_indev.o(i.lv_indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = lv_indev_search_obj &rArr;  lv_indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hittest
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[420]"></a>lv_indev_set_group</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_set_group))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[467]"></a>lv_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lv_obj.o(i.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_set_act
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41c]"></a>lv_label_create</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lv_label_create &rArr; lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[46f]"></a>lv_label_get_align</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_align
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[474]"></a>lv_label_get_letter_on</STRONG> (Thumb, 504 bytes, Stack size 72 bytes, lv_label.o(i.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_label_get_letter_on &rArr; get_txt_coords &rArr; lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[46b]"></a>lv_label_get_long_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_long_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[46d]"></a>lv_label_get_recolor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_recolor
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[47e]"></a>lv_label_get_style</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[470]"></a>lv_label_get_text</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[478]"></a>lv_label_refr_text</STRONG> (Thumb, 1116 bytes, Stack size 144 bytes, lv_label.o(i.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[422]"></a>lv_label_set_align</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_label_set_align &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[46c]"></a>lv_label_set_long_mode</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[46e]"></a>lv_label_set_recolor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lv_label_set_recolor &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[41d]"></a>lv_label_set_text</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[471]"></a>lv_label_set_text_static</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2d7]"></a>lv_mem_alloc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>

<P><STRONG><a name="[481]"></a>lv_mem_defrag</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_defrag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>

<P><STRONG><a name="[2ad]"></a>lv_mem_free</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_defrag
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>

<P><STRONG><a name="[2db]"></a>lv_mem_realloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_mem.o(i.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[401]"></a>lv_obj_add_protect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_add_protect))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[3f8]"></a>lv_obj_add_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_set_state
</UL>

<P><STRONG><a name="[402]"></a>lv_obj_align</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[484]"></a>lv_obj_align_mid</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_align_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>

<P><STRONG><a name="[3ec]"></a>lv_obj_allocate_ext_attr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_allocate_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_obj_allocate_ext_attr &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[486]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[344]"></a>lv_obj_clean_style_list</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_clean_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_clean_style_list &rArr; trans_del &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_styles
</UL>

<P><STRONG><a name="[403]"></a>lv_obj_clear_protect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_clear_protect))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[3f7]"></a>lv_obj_clear_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_set_state
</UL>

<P><STRONG><a name="[3fd]"></a>lv_obj_create</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[3f0]"></a>lv_obj_del</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_obj_del &rArr; obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[424]"></a>lv_obj_fade_in</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, lv_obj.o(i.lv_obj_fade_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_obj_fade_in &rArr; lv_anim_start &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>

<P><STRONG><a name="[414]"></a>lv_obj_get_auto_realign</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_auto_realign))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[40f]"></a>lv_obj_get_base_dir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_base_dir))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
</UL>

<P><STRONG><a name="[3d4]"></a>lv_obj_get_child</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_child))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
</UL>

<P><STRONG><a name="[466]"></a>lv_obj_get_click</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_click))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[3ad]"></a>lv_obj_get_coords</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_coords &rArr; lv_area_copy &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[3eb]"></a>lv_obj_get_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>

<P><STRONG><a name="[488]"></a>lv_obj_get_disp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3ba]"></a>lv_obj_get_drag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[3bb]"></a>lv_obj_get_drag_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_dir))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[3a6]"></a>lv_obj_get_drag_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_parent))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
</UL>

<P><STRONG><a name="[3c3]"></a>lv_obj_get_drag_throw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_throw))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[495]"></a>lv_obj_get_draw_rect_ext_pad_size</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, lv_obj.o(i.lv_obj_get_draw_rect_ext_pad_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_get_draw_rect_ext_pad_size &rArr; _lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[3ef]"></a>lv_obj_get_ext_attr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_ext_attr))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_get_checkable
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_src
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[3b4]"></a>lv_obj_get_focused_obj</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_focused_obj))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[3cb]"></a>lv_obj_get_gesture_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_gesture_parent))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
</UL>

<P><STRONG><a name="[3b6]"></a>lv_obj_get_group</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
</UL>

<P><STRONG><a name="[3bd]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[39d]"></a>lv_obj_get_hidden</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_hidden))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[399]"></a>lv_obj_get_local_style</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_local_style &rArr; lv_obj_get_style_list &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_local_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fade_in_anim_ready
</UL>

<P><STRONG><a name="[3a7]"></a>lv_obj_get_parent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[487]"></a>lv_obj_get_screen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_screen))
<BR><BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[3ea]"></a>lv_obj_get_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2df]"></a>lv_obj_get_state</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_state &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
</UL>

<P><STRONG><a name="[2dd]"></a>lv_obj_get_style_list</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_obj_get_style_list &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_opa
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_disable_style_caching
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[3bc]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[40c]"></a>lv_obj_get_width_fit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_width_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_width_fit &rArr; lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
</UL>

<P><STRONG><a name="[3be]"></a>lv_obj_get_x</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_x))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
</UL>

<P><STRONG><a name="[3bf]"></a>lv_obj_get_y</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_y))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>

<P><STRONG><a name="[3f9]"></a>lv_obj_handle_get_type_signal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_handle_get_type_signal))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[465]"></a>lv_obj_hittest</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_hittest))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_obj_hittest &rArr; lv_obj_is_point_on_coords &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[45a]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[45b]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[4c0]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[454]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 776 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_recolor
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[39f]"></a>lv_obj_invalidate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
</UL>

<P><STRONG><a name="[4c1]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>

<P><STRONG><a name="[444]"></a>lv_obj_is_focused</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_is_focused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_is_focused
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[461]"></a>lv_obj_is_point_on_coords</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_is_point_on_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_obj_is_point_on_coords &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hittest
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[3b5]"></a>lv_obj_is_protected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_is_protected))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[3d0]"></a>lv_obj_move_foreground</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_move_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
</UL>

<P><STRONG><a name="[415]"></a>lv_obj_realign</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[460]"></a>lv_obj_refresh_ext_draw_pad</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_refresh_ext_draw_pad))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[2ec]"></a>lv_obj_refresh_style</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_opa
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[4c3]"></a>lv_obj_report_style_mod</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_report_style_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[428]"></a>lv_obj_reset_style_list</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_reset_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_reset_style_list &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[44a]"></a>lv_obj_set_adv_hittest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_adv_hittest))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[3f3]"></a>lv_obj_set_click</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_click))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[3ee]"></a>lv_obj_set_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[41e]"></a>lv_obj_set_event_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_event_cb))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[47c]"></a>lv_obj_set_height</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[2c7]"></a>lv_obj_set_pos</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
</UL>

<P><STRONG><a name="[3ed]"></a>lv_obj_set_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[3f1]"></a>lv_obj_set_size</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[482]"></a>lv_obj_set_state</STRONG> (Thumb, 464 bytes, Stack size 432 bytes, lv_obj.o(i.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lv_obj_set_state &rArr; trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot_compare
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[101]"></a>lv_obj_set_x</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[f2]"></a>lv_obj_set_y</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_demo_benchmark.o(i.lv_demo_printer_anim_in)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[4c9]"></a>lv_port_disp_init</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, lv_port_disp_template.o(i.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ca]"></a>lv_port_fs_init</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, lv_port_fs_template.o(i.lv_port_fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_port_fs_init &rArr; f_mount &rArr; mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4cb]"></a>lv_port_indev_init</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lv_port_indev_template.o(i.lv_port_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_port_indev_init &rArr; lv_indev_drv_register &rArr; lv_task_create &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b8]"></a>lv_signal_send</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj.o(i.lv_signal_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>

<P><STRONG><a name="[32d]"></a>lv_style_copy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_style.o(i.lv_style_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_style_copy &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[2fb]"></a>lv_style_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[48a]"></a>lv_style_list_copy</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, lv_style.o(i.lv_style_list_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_style_list_copy &rArr; get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[2fe]"></a>lv_style_list_get_local_style</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_list_get_local_style))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>

<P><STRONG><a name="[489]"></a>lv_style_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_list_init))
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[39a]"></a>lv_style_remove_prop</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_style.o(i.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fade_in_anim_ready
</UL>

<P><STRONG><a name="[2ff]"></a>lv_style_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[28d]"></a>lv_task_create</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lv_task.o(i.lv_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_task_create &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[4d4]"></a>lv_task_del</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_task_del &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[4d7]"></a>lv_task_handler</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lv_task.o(i.lv_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[423]"></a>lv_task_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[2a0]"></a>lv_task_set_prio</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[3f4]"></a>lv_theme_apply</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_theme.o(i.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_theme_apply &rArr; clear_styles &rArr; lv_obj_clean_style_list &rArr; trans_del &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_styles
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2e8]"></a>lv_theme_get_font_normal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_get_font_normal))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
</UL>

<P><STRONG><a name="[418]"></a>lv_theme_material_init</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lv_theme_material.o(i.lv_theme_material_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[419]"></a>lv_theme_set_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_set_act))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
</UL>

<P><STRONG><a name="[2aa]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(i.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
</UL>

<P><STRONG><a name="[28c]"></a>lv_tick_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[256]"></a>lv_tick_inc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[127]"></a>main</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = main &rArr; lv_demo_benchmark &rArr; lv_label_create &rArr; lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI4_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[250]"></a>st7735_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st7735_reg.o(i.st7735_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st7735_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ReadID
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_GetPixel
</UL>

<P><STRONG><a name="[251]"></a>st7735_recv_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st7735_reg.o(i.st7735_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st7735_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_GetPixel
</UL>

<P><STRONG><a name="[24e]"></a>st7735_send_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st7735_reg.o(i.st7735_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st7735_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRGBRect
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetPixel
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawHLine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayOn
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayOff
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetDisplayWindow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[24c]"></a>st7735_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st7735_reg.o(i.st7735_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st7735_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetOrientation
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayOn
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayOff
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetDisplayWindow
</UL>

<P><STRONG><a name="[f1]"></a>task1_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_demo_benchmark.o(i.task1_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_demo_benchmark.o(i.lv_demo_benchmark)
</UL>
<P><STRONG><a name="[11b]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[525]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[526]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4e1]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, main.o(i.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>MPU_Config</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[12]"></a>STORAGE_GetCapacity_FS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_GetCapacity_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>STORAGE_GetMaxLun_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_GetMaxLun_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>STORAGE_Init_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>STORAGE_IsReady_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_IsReady_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>STORAGE_IsWriteProtected_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_if.o(i.STORAGE_IsWriteProtected_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>STORAGE_Read_FS</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_storage_if.o(i.STORAGE_Read_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = STORAGE_Read_FS &rArr; W25Qx_Read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>STORAGE_Write_FS</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbd_storage_if.o(i.STORAGE_Write_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = STORAGE_Write_FS &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Erase_Block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_if.o(.data)
</UL>
<P><STRONG><a name="[189]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(i.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32h7xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[276]"></a>USB_CoreReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[1b9]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1ba]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[16a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[23b]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 280 bytes, Stack size 12 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdVoltageSwitch
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[242]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[23d]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[246]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32h7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_GetCmdResp6
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[1c7]"></a>SD_FindSCR</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1e0]"></a>SD_InitCard</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm32h7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1df]"></a>SD_PowerON</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdVoltageSwitch &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DriveTransceiver_1_8V_Callback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdVoltageSwitch
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1cf]"></a>SD_SendSDStatus</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32h7xx_hal_sd.o(i.SD_SendSDStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_SendSDStatus &rArr; SDMMC_CmdStatusRegister &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
</UL>

<P><STRONG><a name="[1ec]"></a>SPI_CloseTransfer</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32h7xx_hal_spi.o(i.SPI_CloseTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[1ee]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[1f3]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, stm32h7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1f5]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1f6]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1f7]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1f8]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1f0]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_tim_ex.o(i.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>

<P><STRONG><a name="[1fd]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, stm32h7xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[271]"></a>SWAPBYTE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.SWAPBYTE))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[262]"></a>USBD_GetDescriptor</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[272]"></a>USBD_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[20a]"></a>MSC_BOT_Abort</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_BOT_Abort &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[20c]"></a>MSC_BOT_CBW_Decode</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, usbd_msc_bot.o(i.MSC_BOT_CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[22d]"></a>SCSI_CheckAddressRange</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, usbd_msc_scsi.o(i.SCSI_CheckAddressRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[22e]"></a>SCSI_Inquiry</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_Inquiry &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_UpdateBotData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[238]"></a>SCSI_ProcessRead</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read12
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[239]"></a>SCSI_ProcessWrite</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write12
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
</UL>

<P><STRONG><a name="[234]"></a>SCSI_Read10</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCSI_Read10 &rArr; SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[235]"></a>SCSI_Read12</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Read12))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCSI_Read12 &rArr; SCSI_ProcessRead &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[232]"></a>SCSI_ReadCapacity10</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCSI_ReadCapacity10 &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[233]"></a>SCSI_ReadCapacity16</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity16))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCSI_ReadCapacity16 &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[231]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCSI_ReadFormatCapacity &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[230]"></a>SCSI_RequestSense</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_RequestSense &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[22f]"></a>SCSI_UpdateBotData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_UpdateBotData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_UpdateBotData
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[236]"></a>SCSI_Write10</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[237]"></a>SCSI_Write12</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Write12))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SCSI_Write12 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[26]"></a>lcd_gettick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd.o(i.lcd_gettick))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>lcd_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_init &rArr; HAL_TIMEx_PWMN_Start &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>lcd_readreg</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lcd.o(i.lcd_readreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lcd_readreg &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>lcd_recvdata</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lcd.o(i.lcd_recvdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lcd_recvdata &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>lcd_senddata</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd.o(i.lcd_senddata))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_senddata &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>lcd_writereg</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lcd.o(i.lcd_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lcd_writereg &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.data)
</UL>
<P><STRONG><a name="[24d]"></a>ST7735_IO_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, st7735.o(i.ST7735_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7735_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayOn
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayOff
</UL>

<P><STRONG><a name="[df]"></a>ST7735_ReadRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st7735.o(i.ST7735_ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7735_ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(i.ST7735_RegisterBusIO)
</UL>
<P><STRONG><a name="[e2]"></a>ST7735_RecvDataWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st7735.o(i.ST7735_RecvDataWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7735_RecvDataWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(i.ST7735_RegisterBusIO)
</UL>
<P><STRONG><a name="[e1]"></a>ST7735_SendDataWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st7735.o(i.ST7735_SendDataWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7735_SendDataWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(i.ST7735_RegisterBusIO)
</UL>
<P><STRONG><a name="[24f]"></a>ST7735_SetDisplayWindow</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, st7735.o(i.ST7735_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7735_SetDisplayWindow &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_write_reg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetOrientation
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>

<P><STRONG><a name="[e0]"></a>ST7735_WriteRegWrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, st7735.o(i.ST7735_WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7735_WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(i.ST7735_RegisterBusIO)
</UL>
<P><STRONG><a name="[27a]"></a>W25Qx_GetStatus</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w25qxx.o(i.W25Qx_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_Erase_Block
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Qx_WriteEnable
</UL>

<P><STRONG><a name="[39c]"></a>focus_next_core</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lv_group.o(i.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[445]"></a>lv_group_refocus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[3a0]"></a>obj_to_foreground</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_group.o(i.obj_to_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[3a5]"></a>get_dragged_obj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_indev.o(i.get_dragged_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_dragged_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[2cc]"></a>indev_button_proc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_indev.o(i.indev_button_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = indev_button_proc &rArr; indev_proc_press &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[3b3]"></a>indev_click_focus</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, lv_indev.o(i.indev_click_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = indev_click_focus &rArr; lv_group_focus_obj &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3b9]"></a>indev_drag</STRONG> (Thumb, 670 bytes, Stack size 48 bytes, lv_indev.o(i.indev_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = indev_drag &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_inv_buf_size
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_pop_from_inv_buf
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3c2]"></a>indev_drag_throw</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, lv_indev.o(i.indev_drag_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[2cb]"></a>indev_encoder_proc</STRONG> (Thumb, 886 bytes, Stack size 40 bytes, lv_indev.o(i.indev_encoder_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = indev_encoder_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[3ca]"></a>indev_gesture</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, lv_indev.o(i.indev_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = indev_gesture &rArr; lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_gesture_parent
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[2ca]"></a>indev_keypad_proc</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, lv_indev.o(i.indev_keypad_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = indev_keypad_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[2c9]"></a>indev_proc_press</STRONG> (Thumb, 672 bytes, Stack size 24 bytes, lv_indev.o(i.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = indev_proc_press &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[2c8]"></a>indev_proc_release</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, lv_indev.o(i.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = indev_proc_release &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[2c6]"></a>indev_proc_reset_query_handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lv_indev.o(i.indev_proc_reset_query_handler))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[3b2]"></a>indev_reset_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_indev.o(i.indev_reset_check))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[3e7]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>

<P><STRONG><a name="[105]"></a>fade_in_anim_ready</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj.o(i.fade_in_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fade_in_anim_ready &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_fade_in)
</UL>
<P><STRONG><a name="[3d1]"></a>invalidate_style_cache</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_obj.o(i.invalidate_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[3e6]"></a>lv_area_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_copy &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[469]"></a>lv_color_hex</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_obj.o(i.lv_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[103]"></a>lv_obj_design</STRONG> (Thumb, 564 bytes, Stack size 128 bytes, lv_obj.o(i.lv_obj_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_obj_design &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[491]"></a>lv_obj_get_style_bg_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_bg_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_bg_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[490]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_bg_opa))
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[492]"></a>lv_obj_get_style_border_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_border_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_border_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[494]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_border_post &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[4a5]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_border_side &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4a6]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_border_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[48c]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[4a7]"></a>lv_obj_get_style_image_blend_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_image_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_image_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4a8]"></a>lv_obj_get_style_image_recolor_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_image_recolor_opa))
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4a9]"></a>lv_obj_get_style_line_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_line_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_line_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4aa]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4ab]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4ac]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4ad]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[493]"></a>lv_obj_get_style_opa_scale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_opa_scale))
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[4ae]"></a>lv_obj_get_style_outline_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_outline_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_outline_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4a3]"></a>lv_obj_get_style_outline_opa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_outline_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[4a4]"></a>lv_obj_get_style_outline_pad</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_outline_pad &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[4a2]"></a>lv_obj_get_style_outline_width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_outline_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4af]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4b0]"></a>lv_obj_get_style_pad_inner</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_inner &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4b1]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4b2]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4b3]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[4b4]"></a>lv_obj_get_style_pattern_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_pattern_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_pattern_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4b5]"></a>lv_obj_get_style_pattern_image</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_pattern_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pattern_image &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4b6]"></a>lv_obj_get_style_pattern_recolor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_pattern_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_get_style_pattern_recolor &rArr; _lv_obj_get_style_color &rArr; _lv_style_list_get_color &rArr; _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[48d]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_radius &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[4b7]"></a>lv_obj_get_style_shadow_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_shadow_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_shadow_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[499]"></a>lv_obj_get_style_shadow_ofs_x</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_shadow_ofs_x &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[49a]"></a>lv_obj_get_style_shadow_ofs_y</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_shadow_ofs_y &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[497]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[498]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[496]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_shadow_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4b8]"></a>lv_obj_get_style_text_blend_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_text_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_text_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4b9]"></a>lv_obj_get_style_text_decor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_text_decor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_text_decor &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4ba]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_text_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4bb]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4bc]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[4bd]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[48f]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_transform_height &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[48e]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_transform_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[4be]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[49f]"></a>lv_obj_get_style_value_align</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_value_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_value_align &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[4bf]"></a>lv_obj_get_style_value_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_value_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[49e]"></a>lv_obj_get_style_value_font</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_value_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_value_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[49d]"></a>lv_obj_get_style_value_letter_space</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_value_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_value_letter_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[4a0]"></a>lv_obj_get_style_value_ofs_x</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_value_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_value_ofs_x &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[4a1]"></a>lv_obj_get_style_value_ofs_y</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_value_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[49c]"></a>lv_obj_get_style_value_opa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_value_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[49b]"></a>lv_obj_get_style_value_str</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_style_value_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[102]"></a>lv_obj_signal</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lv_obj_signal &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[483]"></a>obj_align_core</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lv_obj.o(i.obj_align_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[485]"></a>obj_align_mid_core</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, lv_obj.o(i.obj_align_mid_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
</UL>

<P><STRONG><a name="[48b]"></a>obj_del_core</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, lv_obj.o(i.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[104]"></a>opa_scale_anim</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.opa_scale_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = opa_scale_anim &rArr; _lv_obj_set_style_local_opa &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_opa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_fade_in)
</UL>
<P><STRONG><a name="[4c5]"></a>refresh_children_position</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj.o(i.refresh_children_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = refresh_children_position &rArr;  refresh_children_position (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>

<P><STRONG><a name="[4c2]"></a>refresh_children_style</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj.o(i.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[4c4]"></a>report_style_mod_core</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_obj.o(i.report_style_mod_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
</UL>

<P><STRONG><a name="[3d2]"></a>style_prop_is_cacheble</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, lv_obj.o(i.style_prop_is_cacheble))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[4c6]"></a>style_snapshot</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, lv_obj.o(i.style_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_disable_style_caching
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[4c7]"></a>style_snapshot_compare</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, lv_obj.o(i.style_snapshot_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = style_snapshot_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[106]"></a>trans_anim_cb</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, lv_obj.o(i.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[108]"></a>trans_anim_ready_cb</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_obj.o(i.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = trans_anim_ready_cb &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[107]"></a>trans_anim_start_cb</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(i.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = trans_anim_start_cb &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[4c8]"></a>trans_create</STRONG> (Thumb, 580 bytes, Stack size 64 bytes, lv_obj.o(i.trans_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[2eb]"></a>trans_del</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lv_obj.o(i.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = trans_del &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_opa
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[2e2]"></a>update_style_cache</STRONG> (Thumb, 774 bytes, Stack size 24 bytes, lv_obj.o(i.update_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[3d3]"></a>update_style_cache_children</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lv_obj.o(i.update_style_cache_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[2d0]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_refr.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[4cc]"></a>lv_refr_area</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, lv_refr.o(i.lv_refr_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[4cd]"></a>lv_refr_area_part</STRONG> (Thumb, 272 bytes, Stack size 120 bytes, lv_refr.o(i.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[2a2]"></a>lv_refr_areas</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lv_refr.o(i.lv_refr_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[4ce]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_refr.o(i.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[2a1]"></a>lv_refr_join_area</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_join_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_refr_join_area &rArr; lv_area_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[4d3]"></a>lv_refr_obj</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, lv_refr.o(i.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[4d0]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[2a4]"></a>lv_refr_vdb_flush</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_vdb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_refr_vdb_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[2ef]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_style.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[300]"></a>get_alloc_local_style</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_style.o(i.get_alloc_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_opa
</UL>

<P><STRONG><a name="[2f3]"></a>get_prop_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_style.o(i.get_prop_size))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>

<P><STRONG><a name="[2ee]"></a>get_property_index</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lv_style.o(i.get_property_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_property_index &rArr; get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[3ab]"></a>get_style_prop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_style.o(i.get_style_prop))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
</UL>

<P><STRONG><a name="[2f0]"></a>get_style_prop_attr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_style.o(i.get_style_prop_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_style_prop_attr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[2f4]"></a>get_style_prop_id</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_style.o(i.get_style_prop_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_style_prop_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
</UL>

<P><STRONG><a name="[2fc]"></a>lv_style_list_get_style</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_list_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>

<P><STRONG><a name="[303]"></a>style_resize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_style.o(i.style_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[e9]"></a>color_blend_true_color_additive</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_draw_blend.o(i.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = color_blend_true_color_additive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.fill_blended)
<LI> lv_draw_blend.o(i.map_blended)
</UL>
<P><STRONG><a name="[e8]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_draw_blend.o(i.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = color_blend_true_color_subtractive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.fill_blended)
<LI> lv_draw_blend.o(i.map_blended)
</UL>
<P><STRONG><a name="[29a]"></a>fill_blended</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, lv_draw_blend.o(i.fill_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fill_blended &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[29b]"></a>fill_normal</STRONG> (Thumb, 912 bytes, Stack size 72 bytes, lv_draw_blend.o(i.fill_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[299]"></a>fill_set_px</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, lv_draw_blend.o(i.fill_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fill_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[347]"></a>lv_color_mix</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_draw_blend.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_subtractive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_additive
</UL>

<P><STRONG><a name="[29e]"></a>map_blended</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, lv_draw_blend.o(i.map_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = map_blended
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[29f]"></a>map_normal</STRONG> (Thumb, 886 bytes, Stack size 96 bytes, lv_draw_blend.o(i.map_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = map_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[29d]"></a>map_set_px</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, lv_draw_blend.o(i.map_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = map_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[2b2]"></a>_lv_img_buf_transform</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, lv_draw_img.o(i._lv_img_buf_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _lv_img_buf_transform &rArr; _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_alpha
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2b3]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_draw_img.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[437]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[436]"></a>lv_draw_map</STRONG> (Thumb, 1400 bytes, Stack size 256 bytes, lv_draw_img.o(i.lv_draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_draw_map &rArr; _lv_blend_map &rArr; map_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[42c]"></a>lv_img_draw_core</STRONG> (Thumb, 440 bytes, Stack size 120 bytes, lv_draw_img.o(i.lv_img_draw_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[42d]"></a>show_error</STRONG> (Thumb, 66 bytes, Stack size 144 bytes, lv_draw_img.o(i.show_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[378]"></a>draw_letter_normal</STRONG> (Thumb, 632 bytes, Stack size 136 bytes, lv_draw_label.o(i.draw_letter_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = draw_letter_normal &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[37a]"></a>draw_letter_subpx</STRONG> (Thumb, 910 bytes, Stack size 168 bytes, lv_draw_label.o(i.draw_letter_subpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = draw_letter_subpx &rArr; _lv_blend_map &rArr; map_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[430]"></a>hex_char_to_num</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lv_draw_label.o(i.hex_char_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[379]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_label.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[432]"></a>lv_draw_letter</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, lv_draw_label.o(i.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_draw_letter &rArr; draw_letter_subpx &rArr; _lv_blend_map &rArr; map_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[37b]"></a>draw_line_hor</STRONG> (Thumb, 520 bytes, Stack size 88 bytes, lv_draw_line.o(i.draw_line_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = draw_line_hor &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[37c]"></a>draw_line_skew</STRONG> (Thumb, 956 bytes, Stack size 304 bytes, lv_draw_line.o(i.draw_line_skew))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = draw_line_skew &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[37f]"></a>draw_line_ver</STRONG> (Thumb, 460 bytes, Stack size 88 bytes, lv_draw_line.o(i.draw_line_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = draw_line_ver &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[3db]"></a>line_mask_flat</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, lv_draw_mask.o(i.line_mask_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = line_mask_flat
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[3dd]"></a>line_mask_steep</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, lv_draw_mask.o(i.line_mask_steep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = line_mask_steep
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[438]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[f4]"></a>lv_draw_mask_line</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lv_draw_mask.o(i.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_draw_mask_line &rArr; line_mask_steep
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[f5]"></a>lv_draw_mask_radius</STRONG> (Thumb, 1062 bytes, Stack size 96 bytes, lv_draw_mask.o(i.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lv_draw_mask_radius &rArr; _lv_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sqrt
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[3dc]"></a>mask_mix</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_mask.o(i.mask_mix))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
</UL>

<P><STRONG><a name="[36b]"></a>draw_bg</STRONG> (Thumb, 1164 bytes, Stack size 184 bytes, lv_draw_rect.o(i.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = draw_bg &rArr; _lv_blend_map &rArr; map_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[375]"></a>draw_border</STRONG> (Thumb, 724 bytes, Stack size 200 bytes, lv_draw_rect.o(i.draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[376]"></a>draw_full_border</STRONG> (Thumb, 1118 bytes, Stack size 200 bytes, lv_draw_rect.o(i.draw_full_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
</UL>

<P><STRONG><a name="[380]"></a>draw_outline</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, lv_draw_rect.o(i.draw_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = draw_outline &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[381]"></a>draw_pattern</STRONG> (Thumb, 614 bytes, Stack size 168 bytes, lv_draw_rect.o(i.draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = draw_pattern &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[388]"></a>draw_shadow</STRONG> (Thumb, 2902 bytes, Stack size 216 bytes, lv_draw_rect.o(i.draw_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = draw_shadow &rArr; shadow_draw_corner_buf &rArr; shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[38a]"></a>draw_value_str</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, lv_draw_rect.o(i.draw_value_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = draw_value_str &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[370]"></a>grad_get</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lv_draw_rect.o(i.grad_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = grad_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[36c]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[373]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[386]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[4e5]"></a>shadow_blur_corner</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, lv_draw_rect.o(i.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
</UL>

<P><STRONG><a name="[389]"></a>shadow_draw_corner_buf</STRONG> (Thumb, 378 bytes, Stack size 72 bytes, lv_draw_rect.o(i.shadow_draw_corner_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = shadow_draw_corner_buf &rArr; shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[2b7]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_img_buf.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[2b8]"></a>lv_color_mix</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_img_buf.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[44f]"></a>lv_color_make</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lv_img_decoder.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[44c]"></a>lv_img_decoder_built_in_line_alpha</STRONG> (Thumb, 386 bytes, Stack size 80 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_img_decoder_built_in_line_alpha &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[44e]"></a>lv_img_decoder_built_in_line_indexed</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_img_decoder_built_in_line_indexed &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[358]"></a>bits_write</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.bits_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>

<P><STRONG><a name="[356]"></a>decompress</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, lv_font_fmt_txt.o(i.decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = decompress &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_line
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[357]"></a>decompress_line</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.decompress_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = decompress_line &rArr; rle_next &rArr; get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rle_next
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>

<P><STRONG><a name="[4e4]"></a>get_bits</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, lv_font_fmt_txt.o(i.get_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rle_next
</UL>

<P><STRONG><a name="[3a8]"></a>get_glyph_dsc_id</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[3aa]"></a>get_kern_value</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lv_font_fmt_txt.o(i.get_kern_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_kern_value &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
</UL>

<P><STRONG><a name="[eb]"></a>kern_pair_16_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[ec]"></a>kern_pair_8_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[359]"></a>rle_next</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.rle_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rle_next &rArr; get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_line
</UL>

<P><STRONG><a name="[ea]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[28e]"></a>anim_mark_list_change</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_anim.o(i.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[30d]"></a>anim_ready_handler</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, lv_anim.o(i.anim_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = anim_ready_handler &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>

<P><STRONG><a name="[e3]"></a>anim_task</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lv_anim.o(i.anim_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = anim_task &rArr; anim_ready_handler &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(i._lv_anim_core_init)
</UL>
<P><STRONG><a name="[291]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>

<P><STRONG><a name="[290]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>

<P><STRONG><a name="[294]"></a>lv_point_within_circle</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lv_area.o(i.lv_point_within_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[3fb]"></a>lv_color_mix</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_color.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_lighten
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>

<P><STRONG><a name="[443]"></a>lv_fs_get_real_path</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_get_real_path))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[2d4]"></a>node_set_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(i.node_set_next))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[2d3]"></a>node_set_prev</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i.node_set_prev))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[47f]"></a>ent_get_next</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_mem.o(i.ent_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_defrag
</UL>

<P><STRONG><a name="[480]"></a>ent_trunc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_mem.o(i.ent_trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ent_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[4d5]"></a>lv_task_exec</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[4d6]"></a>lv_task_time_remaining</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_time_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_task_time_remaining &rArr; lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[308]"></a>lv_txt_get_next_word</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, lv_txt.o(i.lv_txt_get_next_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>

<P><STRONG><a name="[3e]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>lv_txt_utf8_next</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, lv_txt.o(i.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>lv_txt_utf8_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[30e]"></a>apply_theme</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_theme.o(i.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[343]"></a>clear_styles</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, lv_theme.o(i.clear_styles))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = clear_styles &rArr; lv_obj_clean_style_list &rArr; trans_del &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[30f]"></a>arc_init</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lv_theme_material.o(i.arc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arc_init &rArr; lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[31b]"></a>bar_init</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, lv_theme_material.o(i.bar_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bar_init &rArr; lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[325]"></a>basic_init</STRONG> (Thumb, 3386 bytes, Stack size 40 bytes, lv_theme_material.o(i.basic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = basic_init &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_font
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_delay
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[336]"></a>calendar_init</STRONG> (Thumb, 1388 bytes, Stack size 40 bytes, lv_theme_material.o(i.calendar_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = calendar_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[33a]"></a>chart_init</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, lv_theme_material.o(i.chart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = chart_init &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[340]"></a>checkbox_init</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, lv_theme_material.o(i.checkbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = checkbox_init &rArr; _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pattern_opa
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[348]"></a>cpicker_init</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, lv_theme_material.o(i.cpicker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cpicker_init &rArr; lv_style_set_scale_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[353]"></a>ddlist_init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, lv_theme_material.o(i.ddlist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ddlist_init &rArr; lv_style_set_text_line_space &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3a1]"></a>gauge_init</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, lv_theme_material.o(i.gauge_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gauge_init &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d5]"></a>keyboard_init</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, lv_theme_material.o(i.keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = keyboard_init &rArr; lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d7]"></a>led_init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, lv_theme_material.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = led_init &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_lighten
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3de]"></a>linemeter_init</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, lv_theme_material.o(i.linemeter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = linemeter_init &rArr; lv_style_set_scale_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3df]"></a>list_init</STRONG> (Thumb, 1404 bytes, Stack size 32 bytes, lv_theme_material.o(i.list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = list_init &rArr; lv_style_set_transition_time &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[315]"></a>lv_color_hex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_theme_material.o(i.lv_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_hex &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[324]"></a>lv_color_hex3</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_color_hex3))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_color_hex3 &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[3fc]"></a>lv_color_make</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lv_theme_material.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>

<P><STRONG><a name="[330]"></a>lv_color_mix</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[31d]"></a>lv_style_set_bg_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[31c]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_bg_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[328]"></a>lv_style_set_border_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[331]"></a>lv_style_set_border_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_border_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[339]"></a>lv_style_set_border_side</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_border_side &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[329]"></a>lv_style_set_border_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_border_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[355]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_clip_corner &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
</UL>

<P><STRONG><a name="[32a]"></a>lv_style_set_image_recolor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_image_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_image_recolor &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[311]"></a>lv_style_set_line_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_line_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[314]"></a>lv_style_set_line_rounded</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_line_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_line_rounded &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[313]"></a>lv_style_set_line_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_line_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[338]"></a>lv_style_set_margin_bottom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_margin_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[337]"></a>lv_style_set_margin_top</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_margin_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[31f]"></a>lv_style_set_outline_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_outline_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[320]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_outline_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[341]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_outline_pad &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[321]"></a>lv_style_set_outline_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_outline_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[318]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_pad_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[32c]"></a>lv_style_set_pad_inner</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_pad_inner &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[319]"></a>lv_style_set_pad_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_pad_left &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[31a]"></a>lv_style_set_pad_right</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_pad_right &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[317]"></a>lv_style_set_pad_top</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_pad_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[342]"></a>lv_style_set_pattern_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_pattern_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_pattern_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[316]"></a>lv_style_set_radius</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[3a3]"></a>lv_style_set_scale_end_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_scale_end_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_scale_end_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[3a4]"></a>lv_style_set_scale_end_line_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_scale_end_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_scale_end_line_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[3a2]"></a>lv_style_set_scale_grad_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_scale_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_scale_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[349]"></a>lv_style_set_scale_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_scale_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_scale_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
</UL>

<P><STRONG><a name="[3da]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_shadow_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[3d9]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_shadow_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[33b]"></a>lv_style_set_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_size &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
</UL>

<P><STRONG><a name="[326]"></a>lv_style_set_text_color</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[354]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_text_line_space &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
</UL>

<P><STRONG><a name="[3e0]"></a>lv_style_set_transform_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_transform_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[332]"></a>lv_style_set_transition_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_transition_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_transition_delay &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[32f]"></a>lv_style_set_transition_prop_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_transition_prop_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_transition_prop_5 &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[323]"></a>lv_style_set_transition_prop_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_transition_prop_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_transition_prop_6 &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[322]"></a>lv_style_set_transition_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_transition_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_transition_time &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[31e]"></a>lv_style_set_value_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_value_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[327]"></a>lv_style_set_value_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_theme_material.o(i.lv_style_set_value_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_set_value_font &rArr; _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[4da]"></a>msgbox_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_theme_material.o(i.msgbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = msgbox_init &rArr; lv_style_set_shadow_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4db]"></a>page_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, lv_theme_material.o(i.page_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = page_init &rArr; lv_style_set_size &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4de]"></a>roller_init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lv_theme_material.o(i.roller_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = roller_init &rArr; lv_style_set_text_line_space &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4d8]"></a>slider_init</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, lv_theme_material.o(i.slider_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = slider_init &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4dd]"></a>spinbox_init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lv_theme_material.o(i.spinbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spinbox_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[310]"></a>style_init_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_theme_material.o(i.style_init_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = style_init_reset &rArr; lv_style_reset &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[4d9]"></a>switch_init</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lv_theme_material.o(i.switch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = switch_init &rArr; lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4df]"></a>table_init</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, lv_theme_material.o(i.table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = table_init &rArr; lv_style_set_pad_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4e0]"></a>tabview_win_shared_init</STRONG> (Thumb, 1050 bytes, Stack size 32 bytes, lv_theme_material.o(i.tabview_win_shared_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tabview_win_shared_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4dc]"></a>textarea_init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lv_theme_material.o(i.textarea_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = textarea_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[110]"></a>theme_apply</STRONG> (Thumb, 1424 bytes, Stack size 16 bytes, lv_theme_material.o(i.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = theme_apply &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_material.o(i.lv_theme_material_init)
</UL>
<P><STRONG><a name="[ee]"></a>lv_btn_design</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_btn.o(i.lv_btn_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_btn_design
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btn.o(i.lv_btn_create)
</UL>
<P><STRONG><a name="[ed]"></a>lv_btn_signal</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, lv_btn.o(i.lv_btn_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lv_btn_signal &rArr; lv_btn_set_state &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_is_dragging
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_set_state
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_get_checkable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btn.o(i.lv_btn_create)
</UL>
<P><STRONG><a name="[413]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_cont.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[3ff]"></a>lv_cont_layout_center</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lv_cont.o(i.lv_cont_layout_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lv_cont_layout_center &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[404]"></a>lv_cont_layout_col</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, lv_cont.o(i.lv_cont_layout_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = lv_cont_layout_col &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[40b]"></a>lv_cont_layout_grid</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, lv_cont.o(i.lv_cont_layout_grid))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lv_cont_layout_grid &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[40d]"></a>lv_cont_layout_pretty</STRONG> (Thumb, 672 bytes, Stack size 104 bytes, lv_cont.o(i.lv_cont_layout_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_cont_layout_pretty &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[410]"></a>lv_cont_layout_row</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, lv_cont.o(i.lv_cont_layout_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = lv_cont_layout_row &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[412]"></a>lv_cont_refr_autofit</STRONG> (Thumb, 866 bytes, Stack size 64 bytes, lv_cont.o(i.lv_cont_refr_autofit))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_cont_refr_autofit &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_auto_realign
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[416]"></a>lv_cont_refr_layout</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lv_cont.o(i.lv_cont_refr_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lv_cont_refr_layout &rArr; lv_cont_layout_pretty &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[ef]"></a>lv_cont_signal</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lv_cont_signal &rArr; lv_cont_refr_layout &rArr; lv_cont_layout_pretty &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cont.o(i.lv_cont_create)
</UL>
<P><STRONG><a name="[409]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[40a]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[40e]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
</UL>

<P><STRONG><a name="[408]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_margin_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[411]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
</UL>

<P><STRONG><a name="[400]"></a>lv_obj_get_style_pad_inner</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_inner &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[405]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[406]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[407]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_cont.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[fb]"></a>lv_img_design</STRONG> (Thumb, 1342 bytes, Stack size 224 bytes, lv_img.o(i.lv_img_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = lv_img_design &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(i.lv_img_create)
</UL>
<P><STRONG><a name="[fa]"></a>lv_img_signal</STRONG> (Thumb, 612 bytes, Stack size 48 bytes, lv_img.o(i.lv_img_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lv_img_signal &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(i.lv_img_create)
</UL>
<P><STRONG><a name="[455]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_img.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_border_post &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[451]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_img.o(i.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[459]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_img.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[456]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_img.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[457]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_img.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[458]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_img.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[452]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_img.o(i.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[453]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_img.o(i.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[3ac]"></a>get_txt_coords</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_label.o(i.get_txt_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_txt_coords &rArr; lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[47b]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_label.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[479]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_label.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[fd]"></a>lv_label_design</STRONG> (Thumb, 520 bytes, Stack size 184 bytes, lv_label.o(i.lv_label_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = lv_label_design &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[473]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>

<P><STRONG><a name="[47d]"></a>lv_label_revert_dots</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[472]"></a>lv_label_set_dot_tmp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_set_dot_tmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_label_set_dot_tmp &rArr; lv_mem_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[ff]"></a>lv_label_set_offset_x</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_label_set_offset_x &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[100]"></a>lv_label_set_offset_y</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_label_set_offset_y &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[fe]"></a>lv_label_signal</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = lv_label_signal &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_style
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[3b1]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[3ae]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[3af]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[3b0]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[475]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_text_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[477]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[476]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[109]"></a>disp_flush</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lv_port_disp_template.o(i.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disp_flush &rArr; ST7735_SetCursor &rArr; st7735_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7735_send_data
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp_template.o(i.lv_port_disp_init)
</UL>
<P><STRONG><a name="[10b]"></a>fs_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_port_fs_template.o(i.fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fs_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_template.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[10a]"></a>fs_open</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_port_fs_template.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = fs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_template.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[10c]"></a>fs_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_port_fs_template.o(i.fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = fs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_template.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[10e]"></a>fs_seek</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_port_fs_template.o(i.fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = fs_seek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_template.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[10d]"></a>fs_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_port_fs_template.o(i.fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = fs_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_template.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[10f]"></a>keypad_read</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_port_indev_template.o(i.keypad_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev_template.o(i.lv_port_indev_init)
</UL>
<P><STRONG><a name="[f0]"></a>btn_cb</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_demo_benchmark.o(i.btn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = btn_cb &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_src
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_demo_benchmark.o(i.lv_demo_benchmark)
</UL>
<P><STRONG><a name="[335]"></a>lv_demo_printer_anim_in</STRONG> (Thumb, 94 bytes, Stack size 88 bytes, lv_demo_benchmark.o(i.lv_demo_printer_anim_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_demo_printer_anim_in &rArr; lv_obj_fade_in &rArr; lv_anim_start &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_cb
</UL>

<P><STRONG><a name="[41a]"></a>lv_scr_act</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_demo_benchmark.o(i.lv_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_scr_act &rArr; lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_benchmark
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_printer_anim_in
</UL>

<P><STRONG><a name="[43]"></a>__user_font_get_bitmap</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, my_font1.o(i.__user_font_get_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 5368<LI>Call Chain = __user_font_get_bitmap &rArr; __user_font_getdata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_font1.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>__user_font_get_glyph_dsc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, my_font1.o(i.__user_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 5368<LI>Call Chain = __user_font_get_glyph_dsc &rArr; __user_font_getdata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_getdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_font1.o(.data)
</UL>
<P><STRONG><a name="[284]"></a>__user_font_getdata</STRONG> (Thumb, 80 bytes, Stack size 4176 bytes, my_font1.o(i.__user_font_getdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 5352<LI>Call Chain = __user_font_getdata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_get_glyph_dsc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_font_get_bitmap
</UL>

<P><STRONG><a name="[33c]"></a>check_fs</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[350]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[35c]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[345]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[34a]"></a>create_chain</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[34d]"></a>create_name</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[34e]"></a>dbc_1st</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[35a]"></a>dir_clear</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[35e]"></a>dir_find</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[361]"></a>dir_next</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[362]"></a>dir_register</STRONG> (Thumb, 480 bytes, Stack size 96 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[35f]"></a>dir_sdi</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[390]"></a>follow_path</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[364]"></a>gen_numname</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[34b]"></a>get_fat</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[38e]"></a>get_ldnumber</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[393]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[396]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[33e]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[33f]"></a>mem_cmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[363]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[351]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[38f]"></a>mount_volume</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mount_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[33d]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[34c]"></a>put_fat</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[395]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[394]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[392]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[365]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[360]"></a>sum_sfn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[397]"></a>sync_fs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[35b]"></a>sync_window</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25Qx_Write &rArr; W25Qx_WriteEnable &rArr; W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[38c]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[dd]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
